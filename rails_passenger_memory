#!/opt/ree/bin/ruby
pod=<<-POD

=head1 NAME
rails_passenger_memory - Munin plugin to monitor passenger application servers.
Monitors the amount of sessions and running, active and maximum amount of passenger instances.

=head1 APPLICABLE SYSTEMS
All systems that have passenger installed.

=head1 CONFIGURATION
The plugin needs to execute passenger-memory-stats.
This configuration section shows the defaults of the plugin:

  [passenger_*]
  user root
  command /usr/local/bin/ruby %c
  
Options
  env.passenger_memory_stats '/path/to/passenger-memory-stats'

ln -s /usr/share/munin/plugins/rails_passenger_memory /etc/munin/plugins/rails_passenger_memory

=head1 INTERPRETATION
The plugin shows the passenger memory stats

=head1 MAGIC MARKERS
  #%# family=auto
  #%# capabilities=autoconf

=head1 VERSION
1.1

=head1 BUGS
None known

=head1 AUTHOR
Matthew Schoolmaster
(based on Bart ten Brinke - railsdoctors.com)
(based on Daniel Manges - http://gist.github.com/20319)

=head1 LICENSE
MIT

POD

# Globals
PASSENGER_MEMORY_STATS = ENV['passenger_memory_stats'] || '/opt/ree/bin/passenger-memory-stats'

# Check if this plugin can run
def autoconf
  begin
    require 'rubygems'
    gem "passenger", ">=2.0"
  rescue Exception => e
    puts "no (Gem not found: #{e})"
    exit 1
  end
  
  status = `#{PASSENGER_MEMORY_STATS}`
  unless $?.success?
    puts "no (error whene excuting #{PASSENGER_MEMORY_STATS})"
    exit 1
  end
  
  puts "yes"
  exit 0
end

# Describe the graph config
def config
  status = `#{PASSENGER_MEMORY_STATS}`
  
  status =~ /Total\s+:\s+(\d+)/

  puts <<-CONFIG
graph_category App
graph_title Passenger memory stats
graph_vlabel megabytes
graph_info The amount of memory passenger uses
 
apache.label apache memory
nginx.label nginix memory
passenger.label passenger memory
CONFIG
  exit 0
end
 
# Collect the data
# <tt>debug</tt> Show debug information
def run(debug = false)
  status = `#{PASSENGER_MEMORY_STATS}`
  unless $?.success?
    $stderr.puts "failed executing passenger-memory-stats"
    exit 1
  end
  
  type = ['apache','nginx','passenger']
  status.scan(/Total private dirty RSS: (\d+.\d+)/).flatten.each_with_index { |value,index| puts "#{type[index]}.value #{value}" }
end

# Main
if ARGV[0] == "config"
  config
elsif ARGV[0] == "autoconf"
  autoconf
elsif ARGV[0] == "debug"
  run(true)
else
  run
end
